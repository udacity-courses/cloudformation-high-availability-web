AWSTemplateFormatVersion: 2010-09-09
Description: >
  Anyul Rivas / Udacity Cloud Devops Engineer nanodegree
  this template deploys
  - 1 load balancer
  - 1 launch configuration
  - 3 security groups (for the load balancer, the web server and the bastion hosts)
  - 4 servers
  - 2 bastion hosts in a public network to access private subnets servers via ssh
Parameters:
  EnvironmentName:
    Description: Environment Name
    Type: String
    Default: development
  WebHosts:
    Description: Number of we servers
    Type: String
  KeyPairBastionHost:
    Description: SSH Key pair to access the bastion host
    Type: String
  RemoteAccessCIDR:
    Description: Remote CIDR allowed to access the bastion Hosts
    Type: String
Resources:
  IAMReadOnlyRole:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - UdacityReadOnlyBucket
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  allow http traffic to the load Balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http traffic from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          #CidrIp: 0.0.0.0/0
          CidrIp:
            !Sub "${BastionHost2.PrivateIp}/32"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          #CidrIp: 0.0.0.0/0
          CidrIp:
            !Sub "${BastionHost2.PrivateIp}/32"
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
      ImageId: ami-07eda9385feb1e969
      InstanceType: t2.micro
      IamInstanceProfile: !Ref IAMReadOnlyRole
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PV-NETS"
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs:
        - Ref: LoadBalancerTargetGroup
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PB-SN1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PB-SN2"
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: LoadBalancerTargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 1
      ListenerArn: !Ref LoadBalancerListener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
  # Bastion Hosts
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion hosts
      GroupName: bastion-host-group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
  BastionHost1:
    Type: AWS::EC2::Instance
    Description: Jump box to connect via ssh to private servers
    DependsOn:
      - BastionHostSecurityGroup
    Properties:
      ImageId: ami-07eda9385feb1e969
      InstanceType: t2.micro
      KeyName: !Ref KeyPairBastionHost
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: BastionHostSecurityGroup
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PB-SN1"
  BastionHost2:
    Type: AWS::EC2::Instance
    Description: Jump box to connect via ssh to private servers
    DependsOn:
      - BastionHostSecurityGroup
    Properties:
      ImageId: ami-07eda9385feb1e969
      InstanceType: t2.micro
      KeyName: private-server-devops
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: BastionHostSecurityGroup
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PB-SN2"
Outputs:
  Udagram:
    Description: Load Balancer DNS name
    Value: !Join ["",["http://", !GetAtt LoadBalancer.DNSName,]]
    Export:
      Name: !Sub ${EnvironmentName}-url
  # Optional
  BastionHost1Ip:
    Description: Bastion host's public ip
    Value: !GetAtt BastionHost1.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-Bastion-IP-1
  BastionHost2Ip:
    Description: Bastion host's public ip
    Value: !GetAtt BastionHost2.PublicIp
    Export:
      Name: !Sub ${EnvironmentName}-Bastion-IP-2